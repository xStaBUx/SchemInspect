import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: "java"

version 'v1.0'

targetCompatibility = JavaVersion.VERSION_16
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven { url 'https://maven.xpdustry.com/anuken' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

static def os() { //Returns OS name
    String s = System.getProperty("os.name")
    return s == null ? "" : s
}

static def getdatadir() { //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if (ret == null) {
        def os = os()
        if (os.contains("Windows")) {
            return System.getenv("AppData") + "\\Mindustry\\"
        } else if (os.contains("Linux") || os.contains("BSD")) {
            if (System.getenv("XDG_DATA_HOME") != null) {
                String dir = System.getenv("XDG_DATA_HOME")
                if (!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        } else if (os.contains("Mac")) {
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/"
        }
    }
    return ret
}

task jarAndroid {
    dependsOn "jar"
    
    onlyIf {
        project.hasProperty('android') && sdkRoot && new File(sdkRoot).exists()
    }

    doLast {
        if(!sdkRoot || !new File(sdkRoot).exists()) {
            println "Skipping Android JAR creation: No valid Android SDK found."
            return
        }

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) {
            println "Skipping Android JAR creation: No android.jar found in SDK."
            return
        }

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        def result = ["d8", *dependencies.split(), "--min-api", "14", "--output", "${project.archivesBaseName}Android.jar", "${project.archivesBaseName}Desktop.jar"].execute(null, new File("$buildDir/libs"))
        result.waitForProcessOutput(System.out, System.err)
        
        if (result.exitValue() != 0) {
            println "Warning: d8 command failed. Android JAR was not created."
        }
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar) {
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar") }

    doLast {
        def androidJar = file("$buildDir/libs/${project.archivesBaseName}Android.jar")
        if (androidJar.exists()) {
            from { zipTree(androidJar) }
            androidJar.delete()
        }
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
        }
    }
}

task mjar() {
    dependsOn "jar"
    doFirst {}
    ext {
        acopy = { String intoPath ->
            delete {
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy {
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved to ${intoPath}"
        }
    }
    doLast {
        def modsDirectories = []
        def file = new File(rootDir, "modsDirectories.txt")
        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(file))
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close()
        } else {
            modsDirectories.add("classic")
        }
        for (String directory : modsDirectories) {
            if (directory.startsWith("#") || directory.startsWith("//")) {
                println "Directory \"$directory\" was skipped."
                continue
            }
            if (directory.equals("classic")) {
                directory = getdatadir() + "mods"
            }
            acopy(directory)
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"))
        println "Build ended at: ${time}"
    }
}
task mrun {
    dependsOn mjar
    doLast {
        def gamePath = "${temporaryDir.absolutePath}\\Mindustry${mindustryVersion}.jar"
        def gameUrl = mindustryVersion.startsWith("v") ?
                "https://github.com/Anuken/Mindustry/releases/download/${mindustryVersion}/Mindustry.jar" :
                "https://github.com/Anuken/MindustryBuilds/releases/download/${mindustryVersion}/Mindustry-BE-Desktop-${mindustryVersion}.jar"
        def gameFile = new File(gamePath)
        if (!gameFile.exists()) {
            println "Downloading Mindustry ${mindustryVersion} from ${gameUrl} to ${gamePath}"
            new URL(gameUrl).withInputStream { i -> gameFile.withOutputStream { it << i } }
            println "Done"
        }
        javaexec { classpath = files(gamePath) }
    }
}
